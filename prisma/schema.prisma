generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id          String   @id @default(uuid()) // 主キーの指定（UUID）
  todoID      String                        // 日付 (yyyy/mm/d)
  todoContent String                        // 予約内容
  edit        Boolean  @default(false)
  pw          String                        // 編集可否パスワード
  person      String                        // 予約者名
  rooms       String                        // 予約会議室名
  startTime   String                        // 開始時間 (hh:mm)
  finishTime  String                        // 終了時間 (hh:mm)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stripeSessionId String?                   // Checkout Session ID (監査用)

  // 同時間・同部屋の二重予約をDBレベルでブロック
  @@unique([rooms, todoID, startTime, finishTime])
}

enum StripeEventStatus {
  RECEIVED   // 受領（まだ処理前）
  PROCESSED  // 正常処理完了
  SKIPPED    // 冪等性等でスキップ（再送/対象外/未入金など）
  ERROR      // 処理中に例外
}

model StripeEventLog {
  // Stripe の event.id をそのまま主キーにして idempotency を担保
  id           String            @id
  type         String
  apiVersion   String?
  account      String?
  created      DateTime          // Stripeの秒タイムスタンプをDate化
  payload      Json              // イベントの生ペイロード（完全保存）
  signature    String?           // 署名ヘッダ（監査用）
  receivedAt   DateTime          @default(now())
  processedAt  DateTime?
  status       StripeEventStatus @default(RECEIVED)
  error        String?
  retryCount   Int               @default(0)

  @@index([type, created])
}

model PendingCart {
  id        String   @id @default(cuid())
  items     Json
  createdAt DateTime @default(now())

  @@index([createdAt])
}